{"version":3,"file":"js/180.935f5a3e.js","mappings":"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","sources":["webpack://sanyue_imghub/./src/views/ApiDocs.vue?f564","webpack://sanyue_imghub/./src/views/ApiDocs.vue","webpack://sanyue_imghub/./src/views/ApiDocs.vue?91a1","webpack://sanyue_imghub/./src/mixins/backgroundManager.js"],"sourcesContent":["import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, toDisplayString as _toDisplayString, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"api-docs-container\"\n};\nconst _hoisted_2 = [\"innerHTML\"];\nconst _hoisted_3 = {\n  class: \"api-docs-content\"\n};\nconst _hoisted_4 = {\n  class: \"back-button-wrapper\"\n};\nconst _hoisted_5 = {\n  class: \"docs-main\"\n};\nconst _hoisted_6 = {\n  class: \"docs-content\"\n};\nconst _hoisted_7 = {\n  class: \"docs-section\"\n};\nconst _hoisted_8 = {\n  class: \"code-block\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_font_awesome_icon = _resolveComponent(\"font-awesome-icon\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", {\n    class: \"background-wrapper\",\n    innerHTML: _ctx.backgroundImagesTemplate\n  }, null, 8, _hoisted_2), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", {\n    class: \"back-button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.goHome && $options.goHome(...args))\n  }, [_createVNode(_component_font_awesome_icon, {\n    icon: \"home\"\n  })])]), _cache[6] || (_cache[6] = _createElementVNode(\"div\", {\n    class: \"docs-header\"\n  }, [_createElementVNode(\"h1\", {\n    class: \"docs-title\"\n  }, \"上传 API 文档\")], -1)), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_cache[5] || (_cache[5] = _createStaticVNode(\"<section class=\\\"docs-section\\\" data-v-f9ec3db8><h2 data-v-f9ec3db8>一、基本信息</h2><p data-v-f9ec3db8>本文档详细说明上传 API 的使用方式，包括基本信息、请求参数、响应格式及示例，适用于第三方应用集成文件上传功能。</p><table class=\\\"params-table\\\" data-v-f9ec3db8><thead data-v-f9ec3db8><tr data-v-f9ec3db8><th data-v-f9ec3db8>项目</th><th data-v-f9ec3db8>说明</th></tr></thead><tbody data-v-f9ec3db8><tr data-v-f9ec3db8><td data-v-f9ec3db8>接口端点</td><td data-v-f9ec3db8>/upload</td></tr><tr data-v-f9ec3db8><td data-v-f9ec3db8>请求方法</td><td data-v-f9ec3db8>POST</td></tr><tr data-v-f9ec3db8><td data-v-f9ec3db8>认证方式</td><td data-v-f9ec3db8>支持两种：1. 上传认证码（authCode）2. API Token（需具备 upload 权限）</td></tr><tr data-v-f9ec3db8><td data-v-f9ec3db8>内容类型</td><td data-v-f9ec3db8>multipart/form-data（文件上传专用格式）</td></tr><tr data-v-f9ec3db8><td data-v-f9ec3db8>文件大小限制</td><td data-v-f9ec3db8>无固定值，根据选择的上传渠道（如 Telegram、cfr2、S3）而定</td></tr></tbody></table></section><section class=\\\"docs-section\\\" data-v-f9ec3db8><h2 data-v-f9ec3db8>二、请求参数</h2><p data-v-f9ec3db8>请求参数分为 <strong data-v-f9ec3db8>Query 参数</strong>（URL 后缀拼接）和 <strong data-v-f9ec3db8>Body 参数</strong>（表单数据），其中 Body 参数为必需项，Query 参数为可选项。</p><h3 data-v-f9ec3db8>2.1 Query 参数（可选）</h3><table class=\\\"params-table\\\" data-v-f9ec3db8><thead data-v-f9ec3db8><tr data-v-f9ec3db8><th data-v-f9ec3db8>参数名</th><th data-v-f9ec3db8>类型</th><th data-v-f9ec3db8>是否必需</th><th data-v-f9ec3db8>默认值</th><th data-v-f9ec3db8>说明</th></tr></thead><tbody data-v-f9ec3db8><tr data-v-f9ec3db8><td data-v-f9ec3db8>uploadNameType</td><td data-v-f9ec3db8>string</td><td data-v-f9ec3db8>否</td><td data-v-f9ec3db8>default</td><td data-v-f9ec3db8>文件命名方式，可选值：- default：前缀_原名（默认）- index：仅前缀- origin：仅原名- short：短链接命名</td></tr><tr data-v-f9ec3db8><td data-v-f9ec3db8>returnFormat</td><td data-v-f9ec3db8>string</td><td data-v-f9ec3db8>否</td><td data-v-f9ec3db8>default</td><td data-v-f9ec3db8>返回链接格式，可选值：- default：简化格式（如 /file/id）- full：完整链接格式</td></tr></tbody></table><h3 data-v-f9ec3db8>2.2 Body 参数（必需）</h3><table class=\\\"params-table\\\" data-v-f9ec3db8><thead data-v-f9ec3db8><tr data-v-f9ec3db8><th data-v-f9ec3db8>参数名</th><th data-v-f9ec3db8>类型</th><th data-v-f9ec3db8>是否必需</th><th data-v-f9ec3db8>说明</th></tr></thead><tbody data-v-f9ec3db8><tr data-v-f9ec3db8><td data-v-f9ec3db8>file</td><td data-v-f9ec3db8>File</td><td data-v-f9ec3db8>是</td><td data-v-f9ec3db8>待上传的文件（如图片、文档等）</td></tr></tbody></table></section><section class=\\\"docs-section\\\" data-v-f9ec3db8><h2 data-v-f9ec3db8>三、响应格式</h2><p data-v-f9ec3db8>API 响应为 JSON 数组格式，核心字段为 <code data-v-f9ec3db8>data[0].src</code>，用于获取上传后的文件链接。</p><h3 data-v-f9ec3db8>关键说明</h3><ul data-v-f9ec3db8><li data-v-f9ec3db8><strong data-v-f9ec3db8>核心字段</strong>：<code data-v-f9ec3db8>data[0].src</code></li><li data-v-f9ec3db8><strong data-v-f9ec3db8>字段含义</strong>：返回的文件链接<strong data-v-f9ec3db8>不包含域名</strong>，需自行拼接部署域名（示例：若 <code data-v-f9ec3db8>src</code> 为 <code data-v-f9ec3db8>/file/abc123_image.jpg</code>，完整链接为 <code data-v-f9ec3db8>https://your.domain/file/abc123_image.jpg</code>）。</li></ul></section>\", 3)), _createElementVNode(\"section\", _hoisted_7, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", null, \"四、示例\", -1)), _cache[2] || (_cache[2] = _createElementVNode(\"h3\", null, \"4.1 请求示例（bash curl）\", -1)), _createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"pre\", null, [_createElementVNode(\"code\", null, \"curl --location --request POST '\" + _toDisplayString($options.apiBaseUrl) + \"/upload?authCode=your_authCode' \\\\\\n--header 'User-Agent: Apifox/1.0.0 (https://apifox.com)' \\\\\\n--form 'file=@\\\"D:\\\\杂文件\\\\壁纸\\\\genshin109.jpg\\\"'\", 1)])]), _cache[3] || (_cache[3] = _createElementVNode(\"h3\", null, \"4.2 响应示例（JSON）\", -1)), _cache[4] || (_cache[4] = _createElementVNode(\"div\", {\n    class: \"code-block\"\n  }, [_createElementVNode(\"pre\", null, [_createElementVNode(\"code\", null, \"[\\n  {\\n    \\\"src\\\": \\\"/file/abc123_image.jpg\\\"\\n  }\\n]\")])], -1))])])])]), _cache[7] || (_cache[7] = _createStaticVNode(\"<div class=\\\"floating-elements\\\" data-v-f9ec3db8><div class=\\\"floating-shape shape-1\\\" data-v-f9ec3db8></div><div class=\\\"floating-shape shape-2\\\" data-v-f9ec3db8></div><div class=\\\"floating-shape shape-3\\\" data-v-f9ec3db8></div><div class=\\\"floating-shape shape-4\\\" data-v-f9ec3db8></div><div class=\\\"floating-shape shape-5\\\" data-v-f9ec3db8></div></div>\", 1))]);\n}","import \"core-js/modules/es.array.push.js\";\nimport { mapGetters } from 'vuex';\nimport backgroundManager from '@/mixins/backgroundManager';\nexport default {\n  name: 'ApiDocs',\n  mixins: [backgroundManager],\n  computed: {\n    ...mapGetters(['userConfig']),\n    ownerName() {\n      return this.userConfig?.ownerName || 'Sanyue';\n    },\n    apiBaseUrl() {\n      return `${window.location.protocol}//${window.location.host}`;\n    }\n  },\n  mounted() {\n    // 初始化背景图\n    this.initializeBackground('uploadBkImg', '.api-docs-container', false, true);\n  },\n  beforeUnmount() {\n    // 清理背景轮播定时器\n    this.clearBackgroundInterval();\n  },\n  methods: {\n    goHome() {\n      this.$router.push('/');\n    }\n  }\n};","/* unplugin-vue-components disabled */import { render } from \"./ApiDocs.vue?vue&type=template&id=f9ec3db8&scoped=true\"\nimport script from \"./ApiDocs.vue?vue&type=script&lang=js\"\nexport * from \"./ApiDocs.vue?vue&type=script&lang=js\"\n\nimport \"./ApiDocs.vue?vue&type=style&index=0&id=f9ec3db8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-f9ec3db8\"]])\n\nexport default __exports__","/**\r\n * 背景图管理 Mixin\r\n * 用于统一管理页面背景图的加载和轮播逻辑\r\n */\r\n\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      bingWallPaperIndex: 0,\r\n      customWallPaperIndex: 0,\r\n      backgroundInterval: null, // 存储轮播定时器\r\n      // 存储初始化参数，用于主题切换时重新初始化\r\n      backgroundInitParams: null,\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters(['userConfig', 'bingWallPapers', 'useDarkMode']),\r\n    bkInterval() {\r\n      return this.userConfig?.bkInterval || 3000\r\n    },\r\n    bkOpacity() {\r\n      return this.userConfig?.bkOpacity || 1\r\n    },\r\n    // 提供背景图片元素的模板\r\n    backgroundImagesTemplate() {\r\n      return `\r\n        <img id=\"bg1\" class=\"background-image1\" alt=\"Background Image\"/>\r\n        <img id=\"bg2\" class=\"background-image2\" alt=\"Background Image\"/>\r\n      `\r\n    },\r\n    // 提供背景图片的CSS样式\r\n    backgroundImagesStyles() {\r\n      return `\r\n        .background-image1 {\r\n          position: fixed;\r\n          top: 0;\r\n          left: 0;\r\n          width: 100%;\r\n          height: 100%;\r\n          object-fit: cover;\r\n          z-index: -1;\r\n          opacity: 0;\r\n          transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1);\r\n        }\r\n        .background-image2 {\r\n          position: fixed;\r\n          top: 0;\r\n          left: 0;\r\n          width: 100%;\r\n          height: 100%;\r\n          object-fit: cover;\r\n          z-index: -1;\r\n          opacity: 0;\r\n          transition: opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1);\r\n        }\r\n      `\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    // 监听深色模式切换\r\n    useDarkMode(newVal, oldVal) {\r\n      // 只有在值真正改变且已经初始化过背景时才平滑切换主题\r\n      if (newVal !== oldVal && this.backgroundInitParams) {\r\n        this.$nextTick(() => {\r\n          this.smoothThemeTransition(\r\n            this.backgroundInitParams.configKey,\r\n            this.backgroundInitParams.containerSelector,\r\n            this.backgroundInitParams.useDefaultBackground,\r\n            this.backgroundInitParams.autoCreateElements\r\n          )\r\n        })\r\n      }\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    // 动态注入背景图片的CSS样式\r\n    this.injectBackgroundStyles()\r\n  },\r\n\r\n  beforeUnmount() {\r\n    // 组件销毁前清除定时器\r\n    if (this.backgroundInterval) {\r\n      clearInterval(this.backgroundInterval)\r\n    }\r\n    // 立即清除背景图片，不使用过渡效果\r\n    this.clearBackgroundImages(true)\r\n    // 移除动态注入的样式\r\n    this.removeBackgroundStyles()\r\n  },\r\n\r\n  methods: {\r\n    /**\r\n     * 动态注入背景图片样式\r\n     */\r\n    injectBackgroundStyles() {\r\n      const styleId = 'background-manager-styles'\r\n      if (!document.getElementById(styleId)) {\r\n        const style = document.createElement('style')\r\n        style.id = styleId\r\n        style.textContent = this.backgroundImagesStyles\r\n        document.head.appendChild(style)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 移除动态注入的样式\r\n     */\r\n    removeBackgroundStyles() {\r\n      const styleId = 'background-manager-styles'\r\n      const existingStyle = document.getElementById(styleId)\r\n      if (existingStyle) {\r\n        existingStyle.remove()\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 动态创建背景图片元素\r\n     * @param {HTMLElement} container - 要插入背景图片的容器元素\r\n     */\r\n    createBackgroundElements(container) {\r\n      if (!container) {\r\n        console.warn('未提供有效的容器元素')\r\n        return\r\n      }\r\n\r\n      // 检查是否已经存在背景图片元素\r\n      if (document.getElementById('bg1') || document.getElementById('bg2')) {\r\n        return\r\n      }\r\n\r\n      // 创建 bg1 元素\r\n      const bg1 = document.createElement('img')\r\n      bg1.id = 'bg1'\r\n      bg1.className = 'background-image1'\r\n      bg1.alt = 'Background Image'\r\n      \r\n      // 创建 bg2 元素\r\n      const bg2 = document.createElement('img')\r\n      bg2.id = 'bg2'\r\n      bg2.className = 'background-image2'\r\n      bg2.alt = 'Background Image'\r\n\r\n      // 将元素插入到容器的开头\r\n      container.insertBefore(bg1, container.firstChild)\r\n      container.insertBefore(bg2, container.firstChild)\r\n    },\r\n    /**\r\n     * 初始化背景图\r\n     * @param {string} configKey - 用户配置中的背景图配置键名\r\n     * @param {string} containerSelector - 容器选择器，用于设置透明背景\r\n     * @param {boolean} useDefaultBackground - 是否使用默认背景图\r\n     * @param {boolean} autoCreateElements - 是否自动创建背景元素\r\n     */\r\n    initializeBackground(configKey, containerSelector = '.login', useDefaultBackground = false, autoCreateElements = false) {\r\n      // 保存初始化参数，用于主题切换时重新初始化\r\n      this.backgroundInitParams = {\r\n        configKey,\r\n        containerSelector,\r\n        useDefaultBackground,\r\n        autoCreateElements\r\n      }\r\n\r\n      // 如果需要自动创建元素且元素不存在，则创建\r\n      if (autoCreateElements) {\r\n        const container = document.querySelector(containerSelector)\r\n        if (container && (!document.getElementById('bg1') || !document.getElementById('bg2'))) {\r\n          this.createBackgroundElements(container)\r\n        }\r\n      }\r\n\r\n      const bg1 = document.getElementById('bg1')\r\n      const bg2 = document.getElementById('bg2')\r\n      \r\n      if (!bg1 || !bg2) {\r\n        console.warn('背景图元素 #bg1 或 #bg2 未找到，请确保页面中包含这些元素或启用 autoCreateElements')\r\n        return\r\n      }\r\n\r\n      const backgroundConfig = this.userConfig?.[configKey]\r\n\r\n      if (backgroundConfig === 'bing') {\r\n        this.setupBingWallpaper(bg1, bg2, containerSelector)\r\n      } else if (Array.isArray(backgroundConfig) && backgroundConfig.length > 1) {\r\n        this.setupCustomWallpaperCarousel(bg1, bg2, backgroundConfig, containerSelector)\r\n      } else if (Array.isArray(backgroundConfig) && backgroundConfig.length === 1) {\r\n        this.setupSingleCustomWallpaper(bg1, backgroundConfig[0], containerSelector)\r\n      } else if (useDefaultBackground) {\r\n        this.setupDefaultWallpaper(bg1, containerSelector)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 设置 Bing 壁纸轮播\r\n     */\r\n    setupBingWallpaper(bg1, bg2, containerSelector) {\r\n      this.$store.dispatch('fetchBingWallPapers').then(() => {\r\n        if (this.bingWallPapers.length === 0) return\r\n\r\n        this.loadBackgroundImage(bg1, this.bingWallPapers[this.bingWallPaperIndex]?.url, containerSelector)\r\n        \r\n        this.backgroundInterval = setInterval(() => {\r\n          this.switchBingWallpaper(bg1, bg2)\r\n        }, this.bkInterval)\r\n      })\r\n    },\r\n\r\n    /**\r\n     * 设置自定义壁纸轮播\r\n     */\r\n    setupCustomWallpaperCarousel(bg1, bg2, wallpapers, containerSelector) {\r\n      this.loadBackgroundImage(bg1, wallpapers[this.customWallPaperIndex], containerSelector)\r\n      \r\n      this.backgroundInterval = setInterval(() => {\r\n        this.switchCustomWallpaper(bg1, bg2, wallpapers)\r\n      }, this.bkInterval)\r\n    },\r\n\r\n    /**\r\n     * 设置单张自定义壁纸\r\n     */\r\n    setupSingleCustomWallpaper(bg1, wallpaperUrl, containerSelector) {\r\n      this.loadBackgroundImage(bg1, wallpaperUrl, containerSelector)\r\n    },\r\n\r\n    /**\r\n     * 设置默认壁纸\r\n     */\r\n    setupDefaultWallpaper(bg1, containerSelector) {\r\n      // 根据当前深色模式状态选择背景图\r\n      const isDark = this.useDarkMode\r\n      const defaultImage = isDark \r\n        ? require('@/assets/background.jpg') \r\n        : require('@/assets/background-light.jpg')\r\n      \r\n      this.loadBackgroundImage(bg1, defaultImage, containerSelector)\r\n    },\r\n\r\n    /**\r\n     * 加载背景图片\r\n     */\r\n    loadBackgroundImage(imgElement, imageSrc, containerSelector) {\r\n      imgElement.src = imageSrc\r\n      imgElement.onload = () => {\r\n        imgElement.style.opacity = this.bkOpacity\r\n        // 设置容器背景为透明\r\n        const container = document.querySelector(containerSelector)\r\n        if (container) {\r\n          container.style.background = 'transparent'\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 切换 Bing 壁纸\r\n     */\r\n    switchBingWallpaper(bg1, bg2) {\r\n      if (this.bingWallPapers.length === 0) return\r\n\r\n      const curBg = bg1.style.opacity != 0 ? bg1 : bg2\r\n      const nextBg = bg1.style.opacity != 0 ? bg2 : bg1\r\n      \r\n      curBg.style.opacity = 0\r\n      this.bingWallPaperIndex = (this.bingWallPaperIndex + 1) % this.bingWallPapers.length\r\n      \r\n      nextBg.src = this.bingWallPapers[this.bingWallPaperIndex]?.url\r\n      nextBg.onload = () => {\r\n        nextBg.style.opacity = this.bkOpacity\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 切换自定义壁纸\r\n     */\r\n    switchCustomWallpaper(bg1, bg2, wallpapers) {\r\n      const curBg = bg1.style.opacity != 0 ? bg1 : bg2\r\n      const nextBg = bg1.style.opacity != 0 ? bg2 : bg1\r\n      \r\n      curBg.style.opacity = 0\r\n      this.customWallPaperIndex = (this.customWallPaperIndex + 1) % wallpapers.length\r\n      \r\n      nextBg.src = wallpapers[this.customWallPaperIndex]\r\n      nextBg.onload = () => {\r\n        nextBg.style.opacity = this.bkOpacity\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 清除背景轮播定时器\r\n     */\r\n    clearBackgroundInterval() {\r\n      if (this.backgroundInterval) {\r\n        clearInterval(this.backgroundInterval)\r\n        this.backgroundInterval = null\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 清除背景图片显示（带过渡效果）\r\n     * @param {boolean} immediate - 是否立即清除，不使用过渡效果\r\n     */\r\n    clearBackgroundImages(immediate = false) {\r\n      const bg1 = document.getElementById('bg1')\r\n      const bg2 = document.getElementById('bg2')\r\n      \r\n      if (immediate) {\r\n        // 立即清除，不使用过渡效果\r\n        if (bg1) {\r\n          bg1.style.transition = 'none'\r\n          bg1.style.opacity = 0\r\n          bg1.src = ''\r\n          // 恢复过渡效果\r\n          setTimeout(() => {\r\n            if (bg1) bg1.style.transition = 'opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1)'\r\n          }, 50)\r\n        }\r\n        if (bg2) {\r\n          bg2.style.transition = 'none'\r\n          bg2.style.opacity = 0\r\n          bg2.src = ''\r\n          // 恢复过渡效果\r\n          setTimeout(() => {\r\n            if (bg2) bg2.style.transition = 'opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1)'\r\n          }, 50)\r\n        }\r\n      } else {\r\n        // 使用过渡效果淡出\r\n        if (bg1) {\r\n          bg1.style.opacity = 0\r\n          setTimeout(() => {\r\n            if (bg1) bg1.src = ''\r\n          }, 800) // 等待过渡完成后清除src\r\n        }\r\n        if (bg2) {\r\n          bg2.style.opacity = 0\r\n          setTimeout(() => {\r\n            if (bg2) bg2.src = ''\r\n          }, 800) // 等待过渡完成后清除src\r\n        }\r\n      }\r\n    },\r\n\r\n    /**\r\n     * 平滑主题切换（用于响应主题模式变化）\r\n     * @param {string} configKey - 用户配置中的背景图配置键名\r\n     * @param {string} containerSelector - 容器选择器\r\n     * @param {boolean} useDefaultBackground - 是否使用默认背景图\r\n     * @param {boolean} autoCreateElements - 是否自动创建背景元素\r\n     */\r\n    smoothThemeTransition(configKey, containerSelector = '.login', useDefaultBackground = false, autoCreateElements = false) {\r\n      const backgroundConfig = this.userConfig?.[configKey]\r\n      \r\n      // 如果不是默认背景配置，则直接重新初始化（自定义背景不受主题影响）\r\n      if (!useDefaultBackground || backgroundConfig !== undefined) {\r\n        this.reinitializeBackground(configKey, containerSelector, useDefaultBackground, autoCreateElements)\r\n        return\r\n      }\r\n\r\n      // 对于默认背景，执行平滑过渡\r\n      const bg1 = document.getElementById('bg1')\r\n      const bg2 = document.getElementById('bg2')\r\n      \r\n      if (!bg1 || !bg2) {\r\n        // 如果背景元素不存在，直接重新初始化\r\n        this.reinitializeBackground(configKey, containerSelector, useDefaultBackground, autoCreateElements)\r\n        return\r\n      }\r\n\r\n      // 确定当前显示的背景和下一个背景\r\n      const currentBg = bg1.style.opacity != 0 ? bg1 : bg2\r\n      const nextBg = bg1.style.opacity != 0 ? bg2 : bg1\r\n\r\n      // 获取新主题对应的背景图\r\n      const isDark = this.useDarkMode\r\n      const newThemeImage = isDark \r\n        ? require('@/assets/background.jpg') \r\n        : require('@/assets/background-light.jpg')\r\n\r\n      // 预加载新背景图\r\n      const preloadImg = new Image()\r\n      preloadImg.onload = () => {\r\n        // 设置下一个背景的图片源\r\n        nextBg.src = newThemeImage\r\n        \r\n        // 等待图片加载完成后执行淡入淡出过渡\r\n        nextBg.onload = () => {\r\n          // 淡出当前背景\r\n          currentBg.style.opacity = 0\r\n          \r\n          // 稍微延迟后淡入新背景，确保过渡效果平滑\r\n          setTimeout(() => {\r\n            nextBg.style.opacity = this.bkOpacity\r\n            \r\n            // 设置容器背景为透明\r\n            const container = document.querySelector(containerSelector)\r\n            if (container) {\r\n              container.style.background = 'transparent'\r\n            }\r\n          }, 50) // 50ms 延迟，让淡出效果先开始\r\n        }\r\n      }\r\n      \r\n      preloadImg.onerror = () => {\r\n        // 如果预加载失败，回退到直接重新初始化\r\n        console.warn('主题背景图预加载失败，回退到直接切换')\r\n        this.reinitializeBackground(configKey, containerSelector, useDefaultBackground, autoCreateElements)\r\n      }\r\n      \r\n      preloadImg.src = newThemeImage\r\n    },\r\n\r\n    /**\r\n     * 重新初始化背景图（用于响应配置变化）\r\n     */\r\n    reinitializeBackground(configKey, containerSelector = '.login', useDefaultBackground = false, autoCreateElements = false) {\r\n      this.clearBackgroundInterval()\r\n      this.clearBackgroundImages(true) // 使用立即清除\r\n      this.bingWallPaperIndex = 0\r\n      this.customWallPaperIndex = 0\r\n      \r\n      // 延迟一小段时间确保清理完成\r\n      setTimeout(() => {\r\n        this.initializeBackground(configKey, containerSelector, useDefaultBackground, autoCreateElements)\r\n      }, 100)\r\n    }\r\n  }\r\n}\r\n"],"names":["_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","render","_ctx","_cache","$props","$setup","$data","$options","_component_font_awesome_icon","innerHTML","backgroundImagesTemplate","onClick","args","goHome","icon","apiBaseUrl","name","mixins","backgroundManager","computed","ownerName","this","userConfig","window","location","protocol","host","mounted","initializeBackground","beforeUnmount","clearBackgroundInterval","methods","$router","push","__exports__","data","bingWallPaperIndex","customWallPaperIndex","backgroundInterval","backgroundInitParams","mapGetters","bkInterval","bkOpacity","backgroundImagesStyles","watch","useDarkMode","newVal","oldVal","$nextTick","smoothThemeTransition","configKey","containerSelector","useDefaultBackground","autoCreateElements","injectBackgroundStyles","clearInterval","clearBackgroundImages","removeBackgroundStyles","styleId","document","getElementById","style","createElement","id","textContent","head","appendChild","existingStyle","remove","createBackgroundElements","container","console","warn","bg1","className","alt","bg2","insertBefore","firstChild","querySelector","backgroundConfig","setupBingWallpaper","Array","isArray","length","setupCustomWallpaperCarousel","setupSingleCustomWallpaper","setupDefaultWallpaper","$store","dispatch","then","bingWallPapers","loadBackgroundImage","url","setInterval","switchBingWallpaper","wallpapers","switchCustomWallpaper","wallpaperUrl","isDark","defaultImage","require","imgElement","imageSrc","src","onload","opacity","background","curBg","nextBg","immediate","transition","setTimeout","undefined","reinitializeBackground","currentBg","newThemeImage","preloadImg","Image","onerror"],"sourceRoot":""}